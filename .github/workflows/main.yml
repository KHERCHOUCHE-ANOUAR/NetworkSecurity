name: workflow

on:
  push:
    branches:
    paths-ignore:
      - 'README.md'


jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Lint code
        run: echo "Linting repository"

      - name: Run unit tests
        run: echo "Running unit tests"

  build-and-push-acr-image:
    name: Continuous Delivery
    needs: integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip

      - name: Login to Azure ACR
        run: |
          echo "${{ secrets.AZURE_ACR_PASSWORD }}" | docker login ${{ secrets.AZURE_ACR_LOGIN_SERVER }} --username ${{ secrets.AZURE_ACR_USERNAME }} --password-stdin
      - name: Create .env file
        run: |
          echo "URI=${{ secrets.MONGODB_URI }}" > .env
      - name: Build, tag, and push Docker image to ACR
        env:
          ACR_LOGIN_SERVER: ${{ secrets.AZURE_ACR_LOGIN_SERVER }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ACR_LOGIN_SERVER/networksecurity:$IMAGE_TAG .
          docker push $ACR_LOGIN_SERVER/networksecurity:$IMAGE_TAG

  deploy-container:
    name: Continuous Deployment
    needs: build-and-push-acr-image
    runs-on: self-hosted
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Login to Azure ACR
        run: |
          echo "${{ secrets.AZURE_ACR_PASSWORD }}" | docker login ${{ secrets.AZURE_ACR_LOGIN_SERVER }} --username ${{ secrets.AZURE_ACR_USERNAME }} --password-stdin

      - name: Pull latest Docker image
        run: |
          docker pull ${{ secrets.AZURE_ACR_LOGIN_SERVER }}/networksecurity:latest

      - name: Stop and remove previous container if running
        run: |
          docker ps -q --filter "name=networksecurity" | grep -q . && docker stop networksecurity && docker rm -fv networksecurity || echo "No container to remove"

      - name: Run Docker container to serve users
        run: |
          docker run -d -p 8080:8080 --ipc="host" --name=networksecurity ${{ secrets.AZURE_ACR_LOGIN_SERVER }}/networksecurity:latest

      - name: Clean up unused Docker resources
        run: |
          docker system prune -f